<?phpnamespace App\Repository;use App\Entities\ProductQuoteAgreement;use Doctrine\ORM\EntityManager;use Doctrine\ORM\EntityRepository;use Doctrine\ORM\Query;class ProductQuoteAgreementRepository extends EntityRepository {    /**     * @var string     */    private $class = 'App\Entities\ProductQuoteAgreement';    /**     * @var EntityManager     */    private $em;    public function __construct(EntityManager $em) {        $this->em = $em;    }    /**     * create Theory     * @return Theory     */    public function prepareData($data) {        return new ProductQuoteAgreement($data);    }    public function create(ProductQuoteAgreement $option) {        $this->em->persist($option);        $this->em->flush();        return $option;    }    public function update(ProductQuoteAgreement $option, $data) {        if (isset($data['is_form_filled'])) {            $option->setIs_form_filled($data['is_form_filled']);        }        if (isset($data['signature'])) {            $option->setSignature($data['signature']);        }        if (isset($data['data_json'])) {            $option->setData_json($data['data_json']);        }        if (isset($data['pdf'])) {            $option->setPdf($data['pdf']);        }        if (isset($data['externally_filled'])) {            $option->setExternally_filled($data['externally_filled']);        }        $this->em->persist($option);        $this->em->flush();    }    public function ofId($id) {        return $this->em->getRepository($this->class)->findOneBy([                    'id' => $id        ]);    }    public function getAllSellerAgreementsOfWpSellerId($wp_seller_id) {        $query = $this->em->createQueryBuilder();//        $query->select('pqa.created_at,pqa.is_form_filled,CONCAT(\''.url('./../Uploads/user_agreement_pdf_without_card/').'\', pqa.pdf) AS pdf_link')        $query->select('pqa.created_at,pqa.is_form_filled,(case when (pqa.is_form_filled = 1) then CONCAT(\'' . config('app.url') . '\',\'Uploads/user_agreement_pdf_without_card/\', pqa.pdf) else \'\' end) as pdf_link,pqa.pdf')                ->from('App\Entities\ProductQuoteAgreement', 'pqa')                ->leftJoin('pqa.seller_id', 's')                ->where('s.wp_seller_id=:wp_seller_id')                ->setParameter('wp_seller_id', $wp_seller_id);        $qb = $query->getQuery();        $data = $qb->getResult(Query::HYDRATE_ARRAY);        return $data;    }    public function getAllFilled() {        $query = $this->em->createQueryBuilder();        $query->select('pqa')                ->from('App\Entities\ProductQuoteAgreement', 'pqa')                ->where('pqa.is_form_filled=:is_form_filled')                ->setParameter('is_form_filled', 1);        $qb = $query->getQuery();        $data = $qb->getResult(Query::HYDRATE_ARRAY);        return $data;    }    public function getAllOfSellerId($seller_id, $filter = null) {        $is_form_filled = 1;        $query = $this->em->createQueryBuilder();        $query->select($query->expr()->count('pqa.id'))                ->from('App\Entities\ProductQuoteAgreement', 'pqa')                ->leftJoin('pqa.seller_id', 's')                ->where('s.id=:id')                ->andWhere('pqa.is_form_filled = :pdf_file')                ->setParameter('id', $seller_id)                ->setParameter('pdf_file', $is_form_filled);        $total = $query->getQuery()->getSingleScalarResult();        $query = $this->em->createQueryBuilder();        $query->select('pqa')                ->from('App\Entities\ProductQuoteAgreement', 'pqa')                ->leftJoin('pqa.seller_id', 's')                ->where('s.id=:id')                ->andWhere('pqa.is_form_filled = :pdf_file')                ->setParameter('id', $seller_id)                ->setParameter('pdf_file', $is_form_filled);        if ($filter) {            $query->setMaxResults($filter['length']);            if (isset($filter['last']) && $filter['last'] != 0) {                $query->andWhere('pqa.id > :pqa_id')                        ->setParameter('pqa_id', $filter['last']);            }        }        $qb = $query->getQuery();        $data = $qb->getResult(Query::HYDRATE_ARRAY);        $final_data = [];        $final_data['data'] = $data;        $final_data['total'] = $total;        return $final_data;    }    public function getTotalProductQuateAgreementCount() {        $qb = $this->em->createQueryBuilder();        $qb->select($qb->expr()->count('pqa.id'))                ->from($this->class, 'pqa');        return $qb->getQuery()->getSingleScalarResult();    }    public function getTotalProductQuateAgreementFilledCount() {        $qb = $this->em->createQueryBuilder();        $qb->select($qb->expr()->count('pqa.id'))                ->from($this->class, 'pqa')                ->where('pqa.is_form_filled = 1');        return $qb->getQuery()->getSingleScalarResult();    }    public function getAllFilledAgreementsOfSeller($seller_id) {        $qb = $this->em->createQueryBuilder();        $qb->select('pqa')                ->from($this->class, 'pqa')                ->where('pqa.is_form_filled = 1')                ->leftJoin('pqa.seller_id', 's')                ->where('s.id=:seller_id')                ->andWhere('pqa.is_form_filled = 1')                ->setParameter('seller_id', $seller_id);        return $qb->getQuery()->getResult(Query::HYDRATE_ARRAY);    }}